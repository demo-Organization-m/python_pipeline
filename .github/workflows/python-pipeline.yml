name: python CI/CD - Feature to Development

on:
  pull_request:
    branches: [development]
    types: [closed]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  checkout-source-code:
    name: Checkout Source Code
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      should_run: ${{ steps.set_output.outputs.should_run }}
    steps:
      - id: set_output
        run: echo "should_run=true" >> $GITHUB_OUTPUT

  # codeql-scan:
  #   name: CodeQL Scanning
  #   needs: checkout-source-code
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: python

  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3

  #     - name: Run CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #         category: "/language:python"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

  testing:
    name: Run Unit Tests with Pytest
    # needs: codeql-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: |
          export PYTHONPATH="$PYTHONPATH:$(pwd)"
          pytest --junitxml=pytest-report.xml

  build-and-publish-artifact:
    name: Build and Publish Artifact Package
    runs-on: ubuntu-latest
    needs: testing
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Build Package
        run: |
          pip install build
          python -m build --sdist --wheel --outdir dist/
          cd dist && zip -r ../python-package.zip .

      - name: Upload Python Artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-Artifact-code
          path: python-package.zip

      - name: Checkout Artifact Repo
        uses: actions/checkout@v4
        with:
          repository: demo-Organization-m/Artifact_Storage
          ref: main
          token: ${{ secrets.MY_GITHUB_TOKEN }}
          path: Artifact_Storage

      - name: Create Artifact Directory
        run: mkdir -p Artifact_Storage/Backend_Artifact

      - name: Check for existing latest version hash
        id: skip-check
        run: |
          cd Artifact_Storage/Backend_Artifact
          latest_file=$(ls Backend_Artifact-v*.zip 2>/dev/null | sort -V | tail -n 1)
          if [[ -f "$latest_file" ]]; then
            unzip -p "$latest_file" | sha256sum | cut -d' ' -f1 > ../../latest_hash.txt
          else
            echo "no_previous_hash" > ../../latest_hash.txt
          fi

      - name: Download Python Artifact
        uses: actions/download-artifact@v4
        with:
          name: python-Artifact-code
          path: python-Artifact-code

      - name: Generate current artifact hash
        run: |
          cd python-Artifact-code
          unzip -p python-package.zip | sha256sum | cut -d' ' -f1 > ../current_hash.txt

      - name: Check for changes
        id: hash-diff
        run: |
          if cmp -s latest_hash.txt current_hash.txt; then
            echo "no_change=true" >> $GITHUB_OUTPUT
          else
            echo "no_change=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip if no changes
        if: steps.hash-diff.outputs.no_change == 'true'
        run: echo "No changes in Python Artifact code — skipping commit and push."

      - name: Determine next version
        if: steps.hash-diff.outputs.no_change == 'false'
        id: version
        run: |
          cd Artifact_Storage/Backend_Artifact
          count=$(ls Backend_Artifact-v*.zip 2>/dev/null | wc -l)
          echo "version=v$((count + 1))" >> $GITHUB_OUTPUT

      - name: Rename and move artifact
        if: steps.hash-diff.outputs.no_change == 'false'
        run: |
          VERSION=${{ steps.version.outputs.version }}
          ZIPFILE=$(find python-Artifact-code -name '*.zip' | head -n 1)
          echo "Found artifact zip: $ZIPFILE"
          mv python-Artifact-code/python-package.zip Artifact_Storage/Backend_Artifact/Backend_Artifact-${VERSION}.zip
          cp Artifact_Storage/Backend_Artifact/Backend_Artifact-${VERSION}.zip Artifact_Storage/Backend_Artifact/Backend_Artifact-latest.zip

      - name: Validate ZIP presence
        if: steps.hash-diff.outputs.no_change == 'false'
        run: ls -lh Artifact_Storage/Backend_Artifact

      - name: Commit and push ZIP to development branch
        if: steps.hash-diff.outputs.no_change == 'false'
        run: |
          cd Artifact_Storage
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Backend_Artifact/Backend_Artifact-*.zip
          git commit -m "Add Backend_Artifact ${{ steps.version.outputs.version }}"
          git push origin main

  # create-pr-development-main:
  #   name: Create PR development to main Branch
  #   needs: build-and-publish-artifact
  #   runs-on: ubuntu-latest
  #   outputs:
  #     pr_url: ${{ steps.create_pr.outputs.pr_url }}
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4

  #     - name: Create Pull Request from development to main
  #       id: create_pr
  #       uses: repo-sync/pull-request@v2
  #       with:
  #         source_branch: development
  #         destination_branch: main
  #         pr_title: "Auto PR: development to main"
  #         pr_body: |
  #           This PR was created from the development to main branch.
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

  #     - name: Wait for PR Merge
  #       run: |
  #         PR_NUMBER=$(gh pr list --state open --json number --jq '.[0].number' --repo "${{ github.repository }}")
  #         while true; do
  #           STATE=$(gh pr view "$PR_NUMBER" --repo "${{ github.repository }}" --json state -q .state)
  #           if [ "$STATE" = "MERGED" ]; then
  #             echo "PR #$PR_NUMBER has been merged!"
  #             break
  #           else
  #             echo "Not merged yet. Waiting for approval..."
  #             sleep 30
  #           fi
  #         done
  #       env:
  #         GH_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
